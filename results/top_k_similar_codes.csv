code1,code2,predictions,similarity_score
"def insertion_sort_for_loop(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        for j in range(i - 1, -1, -1):
            if arr[j] > key:
                arr[j + 1] = arr[j]
            else:
                arr[j + 1] = key
                break
        else:
            arr[0] = key","def insertion_sort_while_loop(arr):
    i = 1
    while i < len(arr):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
        i += 1",1,99.99879
"def insertion_sort_for_loop(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        for j in range(i - 1, -1, -1):
            if arr[j] > key:
                arr[j + 1] = arr[j]
            else:
                arr[j + 1] = key
                break
        else:
            arr[0] = key","def bubble_sort(arr):
    n = len(arr)
    # Traverse through all elements in the array
    for i in range(n):
        # Flag to optimize the algorithm: if no elements were swapped, the list is already sorted
        swapped = False
        
        # Last i elements are already sorted, so no need to check them again
        for j in range(0, n-i-1):
            # Swap if the element found is greater than the next element
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True
        
        # If no elements were swapped, break out of the loop
        if not swapped:
            break

    return arr
",1,99.054794
"def insertion_sort_for_loop(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        for j in range(i - 1, -1, -1):
            if arr[j] > key:
                arr[j + 1] = arr[j]
            else:
                arr[j + 1] = key
                break
        else:
            arr[0] = key","def selection_sort(arr):
    n = len(arr)
    
    # Traverse through all elements in the array
    for i in range(n):
        # Assume the current position is the smallest
        min_index = i
        
        # Find the index of the smallest element in the remaining unsorted part
        for j in range(i+1, n):
            if arr[j] < arr[min_index]:
                min_index = j
        
        # Swap the found minimum element with the first element of the unsorted part
        arr[i], arr[min_index] = arr[min_index], arr[i]
    
    return arr
",1,98.56722
"def insertion_sort_for_loop(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        for j in range(i - 1, -1, -1):
            if arr[j] > key:
                arr[j + 1] = arr[j]
            else:
                arr[j + 1] = key
                break
        else:
            arr[0] = key","def find_median(arr):
    # Sort the array
    arr.sort()
    
    n = len(arr)
    
    # If the length of the array is odd, return the middle element
    if n % 2 != 0:
        return arr[n // 2]
    # If the length of the array is even, return the average of the two middle elements
    else:
        mid1 = arr[n // 2 - 1]
        mid2 = arr[n // 2]
        return (mid1 + mid2) / 2

",0,41.79364
"def insertion_sort_for_loop(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        for j in range(i - 1, -1, -1):
            if arr[j] > key:
                arr[j + 1] = arr[j]
            else:
                arr[j + 1] = key
                break
        else:
            arr[0] = key","arr = [1, 2, 3, 4, 5]
total_sum = 0

# Iterate through each element and add it to total_sum
for num in arr:
    total_sum += num

print(""Sum of elements:"", total_sum)
",0,0.008255414
